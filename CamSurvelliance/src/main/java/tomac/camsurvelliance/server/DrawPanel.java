package tomac.camsurvelliance.server;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;

/**
 *
 * @author Antonio Tomac <antonio.tomac@mediatoolkit.com>
 */
public class DrawPanel extends javax.swing.JPanel {
	private static final long serialVersionUID = 1L;

	/**
	 * Creates new form DrawPanel
	 */
	public DrawPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

	private Image image = null;
	private String text = null;
	private String infoText = null;

	public void drawImageAndText(BufferedImage image, String text) {
		this.image = image;
		this.text = text;
		this.infoText = null;
		repaint();
	}

	public void drawText(String text) {
		this.text = text;
		repaint();
	}

	public void drawInfoText(String infoText) {
		this.infoText = infoText;
		repaint();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	public void paint(Graphics g) {
		if (image != null) {
			g.drawImage(image, 0, 0, getWidth() / 1, getHeight() / 1, null);
		}
		if (text != null) {
			int height = 50;
			int padding = 10;
			Font font = new Font(null, Font.PLAIN, height);
			g.setFont(font);
			double width = g.getFontMetrics().getStringBounds(text, g).getWidth();
			g.setColor(new Color(0, 0, 0, 170));
			g.fillRect(
					(int) (getWidth() - width) / 2 - padding,
					getHeight() - 2 * height - padding,
					(int) width + 2 * padding,
					height + 2 * padding
			);
			g.setColor(Color.WHITE);
			g.drawString(
					text,
					(int) (getWidth() - width) / 2,
					getHeight() - height
			);
		}
		if (infoText != null) {
			int height = 10;
			int padding = 5;
			int startX = 20;
			int startY = 10;
			Font font = new Font(null, Font.PLAIN, height);
			g.setFont(font);
			double width = g.getFontMetrics().getStringBounds(infoText, g).getWidth();
			g.setColor(new Color(0, 0, 0, 170));
			g.fillRect(
					startX - padding,
					getHeight() - 2 * padding - height - startY,
					(int) width + 2 * padding,
					height + 2 * padding
			);
			g.setColor(Color.WHITE);
			g.drawString(
					infoText,
					startX,
					getHeight() - padding - startY
			);
		}
	}
}
